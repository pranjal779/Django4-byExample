You can find more information about the Django administration site at https://docs.djangoproject.
com/en/4.1/ref/contrib/admin/.

in the admin.py file:

from django.contrib import admin
from .models import Post

# admin.site.register(Post)


@admin.register(Post)
class PostAdmin(admin.ModelAdmin):
    list_display = ['title', 'slug', 'author', 'publish', 'status']
    list_filter = ['status', 'created', 'publish', 'author']
    search_fields = ['title', 'body']
    prepopulated_fields = {'slug': ('title',)}
    raw_id_fields = ['author']
    date_hierarchy = 'publish'
    ordering = ['status', 'publish']

# Register your models here.

when I run the Django administration page

in the http://127.0.0.1:8000/admin/blog/post/add/

in the author field it is shows 1 when I try to enter the admin name

and how is these few lines of code is able to bring a popup and search window

and when I click on my admin name (which is pran779) why does it appear 1




In the provided code snippet, the `PostAdmin` class is defined as a customization of the Django admin interface for the `Post` model from your `blog` app.

Let's go through the specific attributes and their functionality:

- `list_display`: This attribute defines the fields to be displayed as columns in the list view of the admin interface for `Post` objects. In this case, it specifies that the columns should include `'title'`, `'slug'`, `'author'`, `'publish'`, and `'status'`.

- `list_filter`: This attribute specifies the fields that can be used as filters in the admin interface's right sidebar. It allows you to filter `Post` objects based on `'status'`, `'created'`, `'publish'`, and `'author'`.

- `search_fields`: This attribute enables a search box in the admin interface where you can search for `Post` objects based on the specified fields. In this case, you can search for `Post` objects using `'title'` and `'body'`.

- `prepopulated_fields`: This attribute specifies that the `'slug'` field should be automatically populated based on the `'title'` field. When you enter a title in the admin interface, the slug field will be automatically filled with a URL-friendly version of the title.

- `raw_id_fields`: This attribute defines fields that should be displayed as a raw input field instead of a dropdown or select box. In this case, the `'author'` field will be displayed as a raw input field, allowing you to enter the author's ID directly.

- `date_hierarchy`: This attribute enables a date-based drill-down navigation by adding a date-based navigation bar at the top of the admin interface. In this case, it uses the `'publish'` field to create the date hierarchy.

- `ordering`: This attribute specifies the default ordering of `Post` objects in the admin interface. In this case, the objects will be ordered by `'status'` and `'publish'`.

Regarding the issue with the author field showing "1" instead of your admin name, it seems like the `author` field is displaying the ID of the related user instead of the username. By default, Django admin uses the primary key of the related model to display the related object in a foreign key field.

To change this behavior and display the admin username instead of the ID, you can override the `__str__` method in the `User` model or create a custom method that returns the desired representation of the `User` object. For example:

```python
class User(AbstractUser):
    # existing fields and methods
    
    def __str__(self):
        return self.username
```

By overriding the `__str__` method and returning the `username`, you should see the admin name displayed in the author field instead of the ID.

I hope this clarifies the functionality of the code and provides a solution for the issue with the author field. Let me know if you have any further questions!