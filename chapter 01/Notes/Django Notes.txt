[
page or pg = pdf interface value for page number
() = actual in page - page number
]

Code Repo for the Book:
https://github.com/PacktPublishing/Django-4-by-example


page 23

• A blog application (chapters 1 to 3)
• An image bookmarking website (chapters 4 to 7)
• An online shop (chapters 8 to 11)
• An e-learning platform (chapters 12 to 17)

Django object-relational mapper (ORM)

pagination

learn how to build complex QuerySets to recommend similar posts.

sitemap framework and create an RSS feed for your posts.

You will complete your blog application by building a search engine using 
PostgreSQL’s full-text search capabilities.

Chapter 4, Building a Social Website,

Chapter 5, Implementing Social Authentication, 
covers implementing social authentication with Google, Facebook, and Twitter 
using OAuth 2 with Python Social Auth.


Chapter 6, Sharing Content on Your Website,

Chapter 7, Tracking User Actions,

Chapter 8, Building an Online Shop,

Chapter 9, Managing Payments and Orders,

Chapter 10, Extending Your Shop,

Chapter 11, Adding Internationalization to Your Shop,

Chapter 12, Building an E-Learning Platform,

Chapter 13, Creating a Content Management System,

Chapter 14, Rendering and Caching Content,

Chapter 15, Building an API,

Chapter 16, Building a Chat Server,
WebSocket

Chapter 17, Going Live, will show you how to create settings for multiple environments and how to 
set up a production environment using PostgreSQL, Redis, uWSGI, NGINX, and Daphne with Docker 
Compose. You will learn how to serve your project securely through HTTPS and use the Django system check framework. The chapter will also teach you how to build a custom middleware and create 
custom management commands.

pg26 indexing of the whole book

page 31
Django 4.0 adds several features such as functional unique constraints for Django models, built-in support for 
caching data with Redis, a new default timezone implementation using the standard Python package 
zoneinfo, a new scrypt password hasher, template-based rendering for forms, as well as other new 
minor features. Django 4.0 drops support for Python 3.6 and 3.7. It also drops support for PostgreSQL 
9.6, Oracle 12.2, and Oracle 18c. Django 4.1 introduces asynchronous handlers for class-based views, 
an asynchronous ORM interface, new validation of model constraints and new templates for rendering 
forms. The 4.1 version drops support for PostgreSQL 10 and MariaDB 10.


32
Django follows the MTV (Model-Template-View) pattern. It is a slightly similar pattern to the wellknown MVC (Model-View-Controller) pattern, where the Template acts as View and the framework 
itself acts as the Controller

The responsibilities in the Django MTV pattern are divided as follows:
• Model – Defines the logical data structure and is the data handler between the database and 
the View.
• Template – Is the presentation layer. Django uses a plain-text template system that keeps 
everything that the browser renders.
• View – Communicates with the database via the Model and transfers the data to the Template 
for viewing


Asynchronous Server Gateway Interface (ASGI)


wsgi.py: This is the configuration to run your project as a Web Server Gateway Interface (WSGI)
 application with WSGI-compatible web servers.



You can run the Django development server on a custom host and port or tell Django to load a specific 
settings file, as follows:
python manage.py runserver 127.0.0.1:8001 --settings=mysite.settings

When you have to deal with multiple environments that require different configurations, 
you can create a different settings file for each environment.


This server is only intended for development and is not suitable for production use. To deploy Django 
in a production environment, you should run it as a WSGI application using a web server, such as 
Apache, Gunicorn, or uWSGI, or as an ASGI application using a server such as Daphne or Uvicorn. 
You can find more information on how to deploy Django with different web servers at https://docs.
djangoproject.com/en/4.1/howto/deployment/wsgi/


Vimportant page 39 or (12)

A Django model is a source of information and behaviors of your data. It consists of a Python class 
that subclasses django.db.models.Model. Each model maps to a single database table, where each 
attribute of the class represents a database field. When you create a model, Django will provide you 
with a practical API to query objects in the database easily.

SEO-friendly URLs

enumeration class Status by subclassing models.TextChoices page-45


page46
The Django authentication framework comes in the django.contrib.auth package 
and contains a User model.


Creating an administration site for models Page-51

********
Working with QuerySets and managers Page-56

The Django object-relational mapper (ORM) is a powerful database abstraction API that lets you 
create, retrieve, update, and delete objects easily. An ORM allows you to generate SQL queries using 
the object-oriented paradigm of Python. You can think of it as a way to interact with your database in 
pythonic fashion instead of writing raw SQL queries.

The ORM maps your models to database tables and provides you with a simple pythonic interface to 
interact with your database. The ORM generates SQL queries and maps the results to model objects. 
The Django ORM is compatible with MySQL, PostgreSQL, SQLite, Oracle, and MariaDB.

Remember that you can define the database of your project in the DATABASES setting of your project’s 
settings.py file. Django can work with multiple databases at a time, and you can program database 
routers to create custom data routing schemes.

Once you have created your data models, Django gives you a free API to interact with them. You can 
find the data model reference of the official documentation at https://docs.djangoproject.com/
en/4.1/ref/models/.
The Django ORM is based on QuerySets. A QuerySet is a collection of database queries to retrieve objects from your database. 
You can apply filters to QuerySets to narrow down the query results based 
on given parameters.
********

Creating Objects pg57
Creating objects
Run the following command in the shell prompt to open the Python shell:
python manage.py shell
Then, type the following lines:
>>> from django.contrib.auth.models import User
>>> from blog.models import Post
>>> user = User.objects.get(username='admin')
>>> post = Post(title='Another post',
... slug='another-post',
... body='Post body.',
... author=user)
>>> post.save()
Let’s analyze what this code does.
First, we are retrieving the user object with the username admin:
user = User.objects.get(username='admin')
The get() method allows you to retrieve a single object from the database. Note that this method 
expects a result that matches the query. If no results are returned by the database, this method will 
raise a DoesNotExist exception, and if the database returns more than one result, it will raise a 
MultipleObjectsReturned exception. Both exceptions are attributes of the model class that the query 
is being performed on.
Then, we are creating a Post instance with a custom title, slug, and body, and set the user that we 
previously retrieved as the author of the post:
post = Post(title='Another post', slug='another-post', body='Post body.', 
author=user)
This object is in memory and not persisted to the database; we created a Python object that can be 
used during runtime but that is not saved into the database.
Finally, we are saving the Post object to the database using the save() method:
post.save()
The preceding action performs an INSERT SQL statement behind the scenes.
We created an object in memory first and then persisted it to the database. You can also create the 
object and persist it into the database in a single operation using the create() method, as follows:
Post.objects.create(title='One more post',
 slug='one-more-post',
 body='Post body.',
 author=user)


what I did:
>>> from django.contrib.auth.models import User
>>> from blog.models import Post
>>> user = User.objects.get(username='pran779')  
>>> post = Post(title='Another post',
...             slug='another-post',  
...             body='Post body.',
...             author=user)
>>> post.save()
>>> post.title = 'post2-pg58'  
>>> post.save()
>>> all_posts = Post.objects.all()
>>> Post.objects.all()
<QuerySet [<Post: post2-pg58>, <Post: About myself>, <Post: who was Sushant Singh Rajput>, <Post: New title>, <Post: New-Entry>]>
>>> from django.contrib.auth.models import User
>>> superuser = User.objects.filter(is_superuser=True)
>>> print(superuser)
<QuerySet [<User: pran779>]>
>>> exit


Updating objects Pg 58


Retrieving objects Page-58
Note that this QuerySet has 
not been executed yet. Django QuerySets are lazy, which means they are only evaluated when they 
are forced to. This behavior makes QuerySets very efficient. If you don’t assign the QuerySet to a variable but instead write it directly on the Python shell, the SQL statement of the QuerySet is executed 
because you are forcing it to generate output:
>>> Post.objects.all()
<QuerySet [<Post: New title>, <Post: New-Entry>, <Post: Who was Django Reinhardt>]>

Using order_by() pg59

When QuerySets are evaluated pg59

QuerySets are only evaluated in the following cases:
• The first time you iterate over them
• When you slice them, for instance, Post.objects.all()[:3]
• When you pickle or cache them
• When you call repr() or len() on them
• When you explicitly call list() on them
• When you test them in a statement, such as bool(), or, and, or if

Creating model managers pg60

Building list and detail views pg61

Creating list and detail views pg61

Django view

we use the render() shortcut provided by Django to render the list of posts with the given 
template.
. This function takes the request object, the template path, and the context variables to render 
the given template. It returns an HttpResponse object with the rendered text (normally HTML code).


Using the get_object_or_404 shortcut -pg62

**Adding URL patterns for your views** -pg63


URL patterns allow you to map URLs to views.
A URL pattern is composed of a string pattern, a view, 
and, optionally, a name that allows you to name the URL project-wide. 
Django runs through each URL pattern and stops at the first one that matches the requested URL. 
Then, Django imports the view of the matching URL pattern and executes it, 
passing an instance of the HttpRequest class and the keyword or positional arguments.

You use angle brackets to capture the values from the URL. Any value specified in the URL pattern 
as <parameter> is captured as a string. You use path converters, such as <int:year>, 
to specifically match and return an integer. For example <slug:post> would specifically match a slug 
(a string that can only contain letters, numbers, underscores, or hyphens). 
You can see all path converters provided by Django at 
https://docs.djangoproject.com/en/4.1/topics/http/urls/#path-converters.

pg-64
You can learn more about defining URL patterns with 
regular expressions at https://docs.djangoproject.com/en/4.1/ref/urls/#django.urls.re_path.


If you haven’t worked with regular expressions before, you might want to take a look at the Regular 
Expression HOWTO located at https://docs.python.org/3/howto/regex.html first.

You can find more information about the Django template language at 
https://docs.djangoproject.com/en/4.1/ref/templates/language/.

Adding URL patterns for your views Page(64)

Creating templates for your views

'''
when from django.http import Http404 added at pg62

def post_detail(request, id):
    try:
        post = Post.published.get(id=id)
    except Post.DoesNotExist:
        raise Http404("No Post found.")

    return render(request,
    'blog/post/detail.html',
    {'post': post})
'''


Page 65

Django has a powerful template language that allows you to specify how data is displayed.
 It is based on template tags, template variables, and template filters:
• Template tags control the rendering of the template and look like {% tag %}
• Template variables get replaced with values when the template is rendered and
 look like {{ variable }}
• Template filters allow you to modify variables for display and look like
 {{ variable|filter }}


 pg 67

 Always use the {% url %} template tag to build URLs in your templates instead of writing 
hardcoded URLs. This will make your URLs more maintainable.



Creating a base template (38) or pg65

{% load static %} tells Django to load the static template tags that are provided by the django.
contrib.staticfiles application, which is contained in the INSTALLED_APPS setting. After loading 
them, you can use the {% static %} template tag throughout this template. With this template tag, you 
can include the static files, such as the blog.css file, which you will find in the code of this example 
under the static/ directory of the blog application. Copy the static/ directory from the code that 
comes along with this chapter into the same location as your project to apply the CSS styles to the 
templates. 
You can find the directory’s contents at 
https://github.com/PacktPublishing/Django4-by-Example/tree/master/Chapter01/mysite/blog/static.


(40) or pg67
Always use the {% url %} template tag to build URLs in your templates instead of writing 
hardcoded URLs. This will make your URLs more maintainable.


////
You can check if your post is added to the database by running the following command in your terminal:

```python
python manage.py shell
```

This will open up the Django shell. You can then run the following commands to check if your post is added to the database:

```python
from blog.models import Post
Post.objects.all()
```

This will return all the posts in the database. If your post is not in the list, then it means that it has not been added to the database.

If you have saved your post as published in 
http://127.0.0.1:8000/admin/blog/ 
and it is not showing up in http://127.0.0.1:8000/blog/, 
then it could be a URL routing issue. You can check if the URL routing is set up correctly by running the following command in your terminal:

```python
python manage.py runserver
```

This will start the Django development server and you can access your site at 
http://127.0.0.1:8000/. 
If you see a 404 error, then it means that the URL routing is not set up correctly.


In Django, it is common to have two different files with the same name at different folders.
This is because Django uses a modular structure where each app can have its own views.py, 
models.py, and templates folder. 
This allows for better organization of code and makes it easier to reuse code across 
different apps.

For example, if you have two apps that both need to display a list of blog posts, 
you can create a single blog_posts.html template file in the templates folder of 
one of the apps and then reuse that template in the other app by including it with 
the `{% include %}` template tag.

\\\\

pg61 or (34)
Start the development server again with the following command in the shell prompt:
python manage.py shell
Now, you can import the Post model and retrieve all published posts whose title starts with Who, executing the following QuerySet:
>>> from blog.models import Post
>>> Post.published.filter(title__startswith='Who')

or

>>> from blog.models import Post
>>> Post.objects.all()
<QuerySet [<Post: About myself>, <Post: who was Sushant Singh Rajput>, <Post: New title>, <Post: New-Entry>]>


# The request/response cycle pg69

pg70

Let’s review the Django request/response process:
1. A web browser requests a page by its URL, for example, https://domain.com/blog/33/. The 
web server receives the HTTP request and passes it over to Django.
2. Django runs through each URL pattern defined in the URL patterns configuration. The framework checks each pattern against the given URL path, in order of appearance, and stops at 
the first one that matches the requested URL. In this case, the pattern /blog/<id>/ matches 
the path /blog/33/.
Chapter 1 43
3. Django imports the view of the matching URL pattern and executes it, passing an instance of 
the HttpRequest class and the keyword or positional arguments. The view uses the models to 
retrieve information from the database. Using the Django ORM QuerySets are translated into 
SQL and executed in the database.
4. The view uses the render() function to render an HTML template passing the Post object as 
a context variable.
5. The rendered content is returned as a HttpResponse object by the view with the text/html
content type by default.